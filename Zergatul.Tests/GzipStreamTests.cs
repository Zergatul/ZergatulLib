using System.IO;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Zergatul.IO.Compression;

namespace Zergatul.Tests
{
    [TestClass]
    public class GzipStreamTests
    {
        [TestMethod]
        public void SimpleTest()
        {
            var ms = new MemoryStream(BitHelper.HexToBytes("1f8b0800000000000400cbc9cf4b57c8c14294a416970000945af4111d000000"));
            using (var gzip = new GzipStream(ms, CompressionMode.Decompress))
            using (var sr = new StreamReader(gzip))
            {
                string text = sr.ReadToEnd();
                Assert.IsTrue(text == "long long long long long test");
            }
        }

        [TestMethod]
        public async Task SimpleAsyncTest()
        {
            var ms = new AsyncMemoryStream(BitHelper.HexToBytes("1f8b0800000000000400cbc9cf4b57c8c14294a416970000945af4111d000000"), 10);
            using (var gzip = new GzipStream(ms, CompressionMode.Decompress))
            using (var sr = new StreamReader(gzip))
            {
                string text = await sr.ReadToEndAsync();
                Assert.IsTrue(text == "long long long long long test");
            }
        }

        [TestMethod]
        public void CharRepeatTest()
        {
            var ms = new MemoryStream(BitHelper.HexToBytes(
                "1f8b0800000000000400edc18100000000c320d6f94b1ce4550100000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000000000000000000000000000000000000000000af06bcbf25dc40420f00"));
            using (var gzip = new GzipStream(ms, CompressionMode.Decompress))
            using (var sr = new StreamReader(gzip))
            {
                string text = sr.ReadToEnd();
                Assert.IsTrue(text == new string('a', 1000000));
            }
        }

        [TestMethod]
        public async Task CharRepeatAsyncTest()
        {
            var ms = new AsyncMemoryStream(BitHelper.HexToBytes(
                "1f8b0800000000000400edc18100000000c320d6f94b1ce4550100000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000000000000000000000000000000000000000000af06bcbf25dc40420f00"), 10);
            using (var gzip = new GzipStream(ms, CompressionMode.Decompress))
            using (var sr = new StreamReader(gzip))
            {
                string text = await sr.ReadToEndAsync();
                Assert.IsTrue(text == new string('a', 1000000));
            }
        }

        [TestMethod]
        public void OneByteFeedTest()
        {
            var ms = new MemoryStream(BitHelper.HexToBytes(
                "1f8b0800000000000400edc18100000000c320d6f94b1ce4550100000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000000000000000000000000000000000000000000af06bcbf25dc40420f00"));
            using (var gzip = new GzipStream(new OneByteReadStream(ms), CompressionMode.Decompress))
            using (var sr = new StreamReader(gzip))
            {
                string text = sr.ReadToEnd();
                Assert.IsTrue(text == new string('a', 1000000));
            }
        }
    }
}