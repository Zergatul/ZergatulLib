// ********************************************************************
// This is autogenerated file. Change OIDs.xml/GenerateOIDs.ps1 instead
// ********************************************************************
// SHA256         OIDs.xml: 30336B80447D683BAF849A6854BD43EB70BD07FBD7BB00344825E1F15EF79018
// SHA256 GenerateOIDs.ps1: 95EF3F39F96281473C6C58367DF8CEEA658B87EFB39736634EA9F5FA4F772B97
// ********************************************************************

using System.Collections.Generic;
using System.Linq;

namespace Zergatul.Network
{
    public partial class OID
    {
        /// <summary>
        /// 1
        /// </summary>
        public static class ISO
        {
            /// <summary>
            /// 1.2
            /// </summary>
            public static class MemberBody
            {
                /// <summary>
                /// 1.2.643
                /// </summary>
                public static class RU
                {
                    /// <summary>
                    /// 1.2.643.2
                    /// </summary>
                    public static class Reg2
                    {
                        /// <summary>
                        /// 1.2.643.2.2
                        /// </summary>
                        public static class CryptoPro
                        {
                            public static OID Other = new OID("1.2.643.2.2.1", "other");
                            public static OID GostR3411_94_With_GostR3410_2001 = new OID("1.2.643.2.2.3", "gostR3411-94-with-gostR3410-2001");
                            public static OID GostR3411_94_With_GostR3410_94 = new OID("1.2.643.2.2.4", "gostR3411-94-with-gostR3410-94");
                            public static OID GostR3411_94 = new OID("1.2.643.2.2.9", "gostR3411-94");
                            public static OID HMACGostR3411 = new OID("1.2.643.2.2.10", "hmacgostr3411");
                            public static OID KeyWrap = new OID("1.2.643.2.2.13", "keyWrap");
                            public static OID KeyMeshing = new OID("1.2.643.2.2.14", "keyMeshing");
                            public static OID GostR3410_2001 = new OID("1.2.643.2.2.19", "gostR3410-2001");
                            public static OID GostR3410_94 = new OID("1.2.643.2.2.20", "gostR3410-94");
                            public static OID Gost28147_89 = new OID("1.2.643.2.2.21", "gost28147-89");
                            public static OID Gost28147_89_MAC = new OID("1.2.643.2.2.22", "gost28147-89-MAC");
                            public static OID Hashes = new OID("1.2.643.2.2.30", "hashes");
                            public static OID Encrypts = new OID("1.2.643.2.2.31", "encrypts");
                            public static OID Signs = new OID("1.2.643.2.2.32", "signs");
                            public static OID Exchanges = new OID("1.2.643.2.2.33", "exchanges");
                            public static OID Extensions = new OID("1.2.643.2.2.34", "extensions");
                            public static OID ECCSigns = new OID("1.2.643.2.2.35", "ecc-signs");
                            public static OID ECCExchanges = new OID("1.2.643.2.2.36", "ecc-exchanges");
                            public static OID PrivateKeys = new OID("1.2.643.2.2.37", "private-keys");
                            public static OID PolicyIds = new OID("1.2.643.2.2.38", "policyIds");
                            public static OID PolicyQt = new OID("1.2.643.2.2.39", "policyQt");
                            public static OID PKIXCMPInfos = new OID("1.2.643.2.2.41", "pkixcmp-infos");
                            public static OID AuditServiceTypes = new OID("1.2.643.2.2.42", "audit-service-types");
                            public static OID AuditRecordTypes = new OID("1.2.643.2.2.43", "audit-record-types");
                            public static OID Attributes = new OID("1.2.643.2.2.44", "attributes");
                            public static OID NameServiceTypes = new OID("1.2.643.2.2.45", "name-service-types");
                            public static OID GostR3410_2001_CryptoPro_ESDH = new OID("1.2.643.2.2.96", "gostR3410-2001-CryptoPro-ESDH");
                            public static OID GostR3410_94_CryptoPro_ESDH = new OID("1.2.643.2.2.97", "gostR3410-94-CryptoPro-ESDH");
                            public static OID GostR3410_2001DH = new OID("1.2.643.2.2.98", "gostR3410-2001DH");
                            public static OID GostR3410_94DH = new OID("1.2.643.2.2.99", "gostR3410-94DH");

                            public static IEnumerable<OID> All => new OID[]
                            {
                                Other,
                                GostR3411_94_With_GostR3410_2001,
                                GostR3411_94_With_GostR3410_94,
                                GostR3411_94,
                                HMACGostR3411,
                                KeyWrap,
                                KeyMeshing,
                                GostR3410_2001,
                                GostR3410_94,
                                Gost28147_89,
                                Gost28147_89_MAC,
                                Hashes,
                                Encrypts,
                                Signs,
                                Exchanges,
                                Extensions,
                                ECCSigns,
                                ECCExchanges,
                                PrivateKeys,
                                PolicyIds,
                                PolicyQt,
                                PKIXCMPInfos,
                                AuditServiceTypes,
                                AuditRecordTypes,
                                Attributes,
                                NameServiceTypes,
                                GostR3410_2001_CryptoPro_ESDH,
                                GostR3410_94_CryptoPro_ESDH,
                                GostR3410_2001DH,
                                GostR3410_94DH,
                            };
                        }

                        public static IEnumerable<OID> All => (CryptoPro.All);
                    }

                    public static IEnumerable<OID> All => (Reg2.All);
                }

                /// <summary>
                /// 1.2.840
                /// </summary>
                public static class US
                {
                    /// <summary>
                    /// 1.2.840.10040
                    /// </summary>
                    public static class X957
                    {
                        /// <summary>
                        /// 1.2.840.10040.4
                        /// </summary>
                        public static class X9Algorithm
                        {
                            public static OID DSA = new OID("1.2.840.10040.4.1", "dsa");

                            public static IEnumerable<OID> All => new OID[]
                            {
                                DSA,
                            };
                        }

                        public static IEnumerable<OID> All => (X9Algorithm.All);
                    }

                    /// <summary>
                    /// 1.2.840.10045
                    /// </summary>
                    public static class ANSI_X962
                    {
                        /// <summary>
                        /// 1.2.840.10045.2
                        /// </summary>
                        public static class KeyType
                        {
                            public static OID ECPublicKey = new OID("1.2.840.10045.2.1", "ecPublicKey");

                            public static IEnumerable<OID> All => new OID[]
                            {
                                ECPublicKey,
                            };
                        }

                        /// <summary>
                        /// 1.2.840.10045.3
                        /// </summary>
                        public static class Curves
                        {
                            /// <summary>
                            /// 1.2.840.10045.3.0
                            /// </summary>
                            public static class Char2
                            {
                                public static OID C2pnb163v1 = new OID("1.2.840.10045.3.0.1", "c2pnb163v1");
                                public static OID C2pnb163v2 = new OID("1.2.840.10045.3.0.2", "c2pnb163v2");
                                public static OID C2pnb163v3 = new OID("1.2.840.10045.3.0.3", "c2pnb163v3");
                                public static OID C2pnb176w1 = new OID("1.2.840.10045.3.0.4", "c2pnb176w1");
                                public static OID C2tnb191v1 = new OID("1.2.840.10045.3.0.5", "c2tnb191v1");
                                public static OID C2tnb191v2 = new OID("1.2.840.10045.3.0.6", "c2tnb191v2");
                                public static OID C2tnb191v3 = new OID("1.2.840.10045.3.0.7", "c2tnb191v3");
                                public static OID C2onb191v4 = new OID("1.2.840.10045.3.0.8", "c2onb191v4");
                                public static OID C2onb191v5 = new OID("1.2.840.10045.3.0.9", "c2onb191v5");
                                public static OID C2pnb208w1 = new OID("1.2.840.10045.3.0.10", "c2pnb208w1");
                                public static OID C2tnb239v1 = new OID("1.2.840.10045.3.0.11", "c2tnb239v1");
                                public static OID C2tnb239v2 = new OID("1.2.840.10045.3.0.12", "c2tnb239v2");
                                public static OID C2tnb239v3 = new OID("1.2.840.10045.3.0.13", "c2tnb239v3");
                                public static OID C2onb239v4 = new OID("1.2.840.10045.3.0.14", "c2onb239v4");
                                public static OID C2onb239v5 = new OID("1.2.840.10045.3.0.15", "c2onb239v5");
                                public static OID C2pnb272W1 = new OID("1.2.840.10045.3.0.16", "c2pnb272W1");
                                public static OID C2pnb304W1 = new OID("1.2.840.10045.3.0.17", "c2pnb304W1");
                                public static OID C2tnb359v1 = new OID("1.2.840.10045.3.0.18", "c2tnb359v1");
                                public static OID C2pnb368w1 = new OID("1.2.840.10045.3.0.19", "c2pnb368w1");
                                public static OID C2tnb431r1 = new OID("1.2.840.10045.3.0.20", "c2tnb431r1");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    C2pnb163v1,
                                    C2pnb163v2,
                                    C2pnb163v3,
                                    C2pnb176w1,
                                    C2tnb191v1,
                                    C2tnb191v2,
                                    C2tnb191v3,
                                    C2onb191v4,
                                    C2onb191v5,
                                    C2pnb208w1,
                                    C2tnb239v1,
                                    C2tnb239v2,
                                    C2tnb239v3,
                                    C2onb239v4,
                                    C2onb239v5,
                                    C2pnb272W1,
                                    C2pnb304W1,
                                    C2tnb359v1,
                                    C2pnb368w1,
                                    C2tnb431r1,
                                };
                            }

                            /// <summary>
                            /// 1.2.840.10045.3.1
                            /// </summary>
                            public static class Prime
                            {
                                public static OID Prime192v1 = new OID("1.2.840.10045.3.1.1", "prime192v1");
                                public static OID Prime192v2 = new OID("1.2.840.10045.3.1.2", "prime192v2");
                                public static OID Prime192v3 = new OID("1.2.840.10045.3.1.3", "prime192v3");
                                public static OID Prime239v1 = new OID("1.2.840.10045.3.1.4", "prime239v1");
                                public static OID Prime239v2 = new OID("1.2.840.10045.3.1.5", "prime239v2");
                                public static OID Prime239v3 = new OID("1.2.840.10045.3.1.6", "prime239v3");
                                public static OID Prime256v1 = new OID("1.2.840.10045.3.1.7", "prime256v1");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    Prime192v1,
                                    Prime192v2,
                                    Prime192v3,
                                    Prime239v1,
                                    Prime239v2,
                                    Prime239v3,
                                    Prime256v1,
                                };
                            }

                            public static IEnumerable<OID> All => (Char2.All).Concat(Prime.All);
                        }

                        /// <summary>
                        /// 1.2.840.10045.4
                        /// </summary>
                        public static class Signatures
                        {
                            /// <summary>
                            /// 1.2.840.10045.4.3
                            /// </summary>
                            public static class ECDSAWithSHA2
                            {
                                public static OID ECDSAWithSHA224 = new OID("1.2.840.10045.4.3.1", "ecdsa-with-SHA224");
                                public static OID ECDSAWithSHA256 = new OID("1.2.840.10045.4.3.2", "ecdsa-with-SHA256");
                                public static OID ECDSAWithSHA384 = new OID("1.2.840.10045.4.3.3", "ecdsa-with-SHA384");
                                public static OID ECDSAWithSHA512 = new OID("1.2.840.10045.4.3.4", "ecdsa-with-SHA512");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    ECDSAWithSHA224,
                                    ECDSAWithSHA256,
                                    ECDSAWithSHA384,
                                    ECDSAWithSHA512,
                                };
                            }

                            public static IEnumerable<OID> All => (ECDSAWithSHA2.All);
                        }

                        public static IEnumerable<OID> All => (KeyType.All).Concat(Curves.All).Concat(Signatures.All);
                    }

                    /// <summary>
                    /// 1.2.840.113549
                    /// </summary>
                    public static class RSADSI
                    {
                        /// <summary>
                        /// 1.2.840.113549.1
                        /// </summary>
                        public static class PKCS
                        {
                            /// <summary>
                            /// 1.2.840.113549.1.1
                            /// </summary>
                            public static class PKCS1
                            {
                                public static OID RSA = new OID("1.2.840.113549.1.1.1", "rsaEncryption");
                                public static OID MD2WithRSA = new OID("1.2.840.113549.1.1.2", "md2WithRSAEncryption");
                                public static OID MD4WithRSA = new OID("1.2.840.113549.1.1.3", "md4withRSAEncryption");
                                public static OID MD5WithRSA = new OID("1.2.840.113549.1.1.4", "md5WithRSAEncryption");
                                public static OID SHA1WithRSA = new OID("1.2.840.113549.1.1.5", "sha1-with-rsa-signature");
                                public static OID RSAOAEPEncryptionSET = new OID("1.2.840.113549.1.1.6", "rsaOAEPEncryptionSET");
                                public static OID RSAESOAEP = new OID("1.2.840.113549.1.1.7", "id-RSAES-OAEP");
                                public static OID MGF1 = new OID("1.2.840.113549.1.1.8", "id-mgf1");
                                public static OID PSpecified = new OID("1.2.840.113549.1.1.9", "id-pSpecified");
                                public static OID RSASSAPSS = new OID("1.2.840.113549.1.1.10", "rsassa-pss");
                                public static OID SHA256WithRSA = new OID("1.2.840.113549.1.1.11", "sha256WithRSAEncryption");
                                public static OID SHA384WithRSA = new OID("1.2.840.113549.1.1.12", "sha384WithRSAEncryption");
                                public static OID SHA512WithRSA = new OID("1.2.840.113549.1.1.13", "sha512WithRSAEncryption");
                                public static OID SHA224WithRSA = new OID("1.2.840.113549.1.1.14", "sha224WithRSAEncryption");
                                public static OID SHA512_224WithRSA = new OID("1.2.840.113549.1.1.15", "sha512-224WithRSAEncryption");
                                public static OID SHA512_256WithRSA = new OID("1.2.840.113549.1.1.16", "sha512-256WithRSAEncryption");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    RSA,
                                    MD2WithRSA,
                                    MD4WithRSA,
                                    MD5WithRSA,
                                    SHA1WithRSA,
                                    RSAOAEPEncryptionSET,
                                    RSAESOAEP,
                                    MGF1,
                                    PSpecified,
                                    RSASSAPSS,
                                    SHA256WithRSA,
                                    SHA384WithRSA,
                                    SHA512WithRSA,
                                    SHA224WithRSA,
                                    SHA512_224WithRSA,
                                    SHA512_256WithRSA,
                                };
                            }

                            /// <summary>
                            /// 1.2.840.113549.1.3
                            /// </summary>
                            public static class PKCS3
                            {
                                public static OID DHKeyAgreement = new OID("1.2.840.113549.1.3.1", "dhKeyAgreement");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    DHKeyAgreement,
                                };
                            }

                            /// <summary>
                            /// 1.2.840.113549.1.7
                            /// </summary>
                            public static class PKCS7
                            {
                                public static OID Data = new OID("1.2.840.113549.1.7.1", "data");
                                public static OID SignedData = new OID("1.2.840.113549.1.7.2", "signedData");
                                public static OID EnvelopedData = new OID("1.2.840.113549.1.7.3", "envelopedData");
                                public static OID SignedAndEnvelopedData = new OID("1.2.840.113549.1.7.4", "signedAndEnvelopedData");
                                public static OID DigestedData = new OID("1.2.840.113549.1.7.5", "digestedData");
                                public static OID EncryptedData = new OID("1.2.840.113549.1.7.6", "encryptedData");
                                public static OID DataWithAttributes = new OID("1.2.840.113549.1.7.7", "dataWithAttributes");
                                public static OID EncryptedPrivateKeyInfo = new OID("1.2.840.113549.1.7.8", "encryptedPrivateKeyInfo");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    Data,
                                    SignedData,
                                    EnvelopedData,
                                    SignedAndEnvelopedData,
                                    DigestedData,
                                    EncryptedData,
                                    DataWithAttributes,
                                    EncryptedPrivateKeyInfo,
                                };
                            }

                            /// <summary>
                            /// 1.2.840.113549.1.9
                            /// </summary>
                            public static class PKCS9
                            {
                                public static OID modules = new OID("1.2.840.113549.1.9.0", "modules");
                                public static OID EmailAddress = new OID("1.2.840.113549.1.9.1", "emailAddress");
                                public static OID UnstructuredName = new OID("1.2.840.113549.1.9.2", "unstructuredName");
                                public static OID ContentType = new OID("1.2.840.113549.1.9.3", "contentType");
                                public static OID MessageDigest = new OID("1.2.840.113549.1.9.4", "messageDigest");
                                public static OID SigningTime = new OID("1.2.840.113549.1.9.5", "signing-time");
                                public static OID CounterSignature = new OID("1.2.840.113549.1.9.6", "countersignature");
                                public static OID ChallengePassword = new OID("1.2.840.113549.1.9.7", "challengePassword");
                                public static OID UnstructuredAddress = new OID("1.2.840.113549.1.9.8", "unstructuredAddress");
                                public static OID ExtendedCertificateAttributes = new OID("1.2.840.113549.1.9.9", "extendedCertificateAttributes");
                                public static OID IssuerAndSerialNumber = new OID("1.2.840.113549.1.9.10", "issuerAndSerialNumber");
                                public static OID PasswordCheck = new OID("1.2.840.113549.1.9.11", "passwordCheck");
                                public static OID PublicKey = new OID("1.2.840.113549.1.9.12", "publicKey");
                                public static OID SigningDescription = new OID("1.2.840.113549.1.9.13", "signingDescription");
                                public static OID ExtensionRequest = new OID("1.2.840.113549.1.9.14", "extensionRequest");
                                public static OID SMIMECapabilities = new OID("1.2.840.113549.1.9.15", "smimeCapabilities");
                                public static OID SMIME = new OID("1.2.840.113549.1.9.16", "smime");
                                public static OID PGPKeyID = new OID("1.2.840.113549.1.9.17", "pgpKeyID");
                                public static OID FriendlyName = new OID("1.2.840.113549.1.9.20", "friendlyName");
                                public static OID LocalKeyID = new OID("1.2.840.113549.1.9.21", "localKeyID");
                                /// <summary>
                                /// 1.2.840.113549.1.9.22
                                /// </summary>
                                public static class CertTypes
                                {
                                    public static OID X509Certificate = new OID("1.2.840.113549.1.9.22.1", "x509Certificate");
                                    public static OID SDSICertificate = new OID("1.2.840.113549.1.9.22.2", "sdsiCertificate");

                                    public static IEnumerable<OID> All => new OID[]
                                    {
                                        X509Certificate,
                                        SDSICertificate,
                                    };
                                }
                                public static OID CRLTypes = new OID("1.2.840.113549.1.9.23", "crlTypes");
                                public static OID OC = new OID("1.2.840.113549.1.9.24", "pkcs-9-oc");
                                public static OID AT = new OID("1.2.840.113549.1.9.25", "pkcs-9-at");
                                public static OID SX = new OID("1.2.840.113549.1.9.26", "pkcs-9-sx");
                                public static OID MR = new OID("1.2.840.113549.1.9.27", "pkcs-9-mr");
                                public static OID CMSAlgorithmProtect = new OID("1.2.840.113549.1.9.52", "id-aa-CMSAlgorithmProtect");

                                public static IEnumerable<OID> All => (CertTypes.All).Concat(new OID[]
                                {
                                    modules,
                                    EmailAddress,
                                    UnstructuredName,
                                    ContentType,
                                    MessageDigest,
                                    SigningTime,
                                    CounterSignature,
                                    ChallengePassword,
                                    UnstructuredAddress,
                                    ExtendedCertificateAttributes,
                                    IssuerAndSerialNumber,
                                    PasswordCheck,
                                    PublicKey,
                                    SigningDescription,
                                    ExtensionRequest,
                                    SMIMECapabilities,
                                    SMIME,
                                    PGPKeyID,
                                    FriendlyName,
                                    LocalKeyID,
                                    CRLTypes,
                                    OC,
                                    AT,
                                    SX,
                                    MR,
                                    CMSAlgorithmProtect,
                                });
                            }

                            /// <summary>
                            /// 1.2.840.113549.1.12
                            /// </summary>
                            public static class PKCS12
                            {
                                /// <summary>
                                /// 1.2.840.113549.1.12.1
                                /// </summary>
                                public static class PKCS12PBE
                                {
                                    public static OID PBEWithSHA1And128BitRC4 = new OID("1.2.840.113549.1.12.1.1", "pbeWithSHAAnd128BitRC4");
                                    public static OID PBEWithSHA1And40BitRC4 = new OID("1.2.840.113549.1.12.1.2", "pbeWithSHAAnd40BitRC4");
                                    public static OID PBEWithSHA1And3KeyTripleDESCBC = new OID("1.2.840.113549.1.12.1.3", "pbeWithSHAAnd3-KeyTripleDES-CBC");
                                    public static OID PBEWithSHA1And2KeyTripleDESCBC = new OID("1.2.840.113549.1.12.1.4", "pbeWithSHAAnd2-KeyTripleDES-CBC");
                                    public static OID PBEWithSHA1And128BitRC2CBC = new OID("1.2.840.113549.1.12.1.5", "pbeWithSHAAnd128BitRC2-CBC");
                                    public static OID PBEWithSHA1And40BitRC2CBC = new OID("1.2.840.113549.1.12.1.6", "pbeWithSHAAnd40BitRC2-CBC");

                                    public static IEnumerable<OID> All => new OID[]
                                    {
                                        PBEWithSHA1And128BitRC4,
                                        PBEWithSHA1And40BitRC4,
                                        PBEWithSHA1And3KeyTripleDESCBC,
                                        PBEWithSHA1And2KeyTripleDESCBC,
                                        PBEWithSHA1And128BitRC2CBC,
                                        PBEWithSHA1And40BitRC2CBC,
                                    };
                                }

                                /// <summary>
                                /// 1.2.840.113549.1.12.10
                                /// </summary>
                                public static class Version1
                                {
                                    /// <summary>
                                    /// 1.2.840.113549.1.12.10.1
                                    /// </summary>
                                    public static class BagIds
                                    {
                                        public static OID KeyBag = new OID("1.2.840.113549.1.12.10.1.1", "keyBag");
                                        public static OID PKCS8ShroudedKeyBag = new OID("1.2.840.113549.1.12.10.1.2", "pkcs-8ShroudedKeyBag");
                                        public static OID CertBag = new OID("1.2.840.113549.1.12.10.1.3", "certBag");
                                        public static OID CRLBag = new OID("1.2.840.113549.1.12.10.1.4", "crlBag");
                                        public static OID SecretBag = new OID("1.2.840.113549.1.12.10.1.5", "secretBag");
                                        public static OID SafeContentsBag = new OID("1.2.840.113549.1.12.10.1.6", "safeContentsBag");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            KeyBag,
                                            PKCS8ShroudedKeyBag,
                                            CertBag,
                                            CRLBag,
                                            SecretBag,
                                            SafeContentsBag,
                                        };
                                    }

                                    public static IEnumerable<OID> All => (BagIds.All);
                                }

                                public static IEnumerable<OID> All => (PKCS12PBE.All).Concat(Version1.All);
                            }

                            public static IEnumerable<OID> All => (PKCS1.All).Concat(PKCS3.All).Concat(PKCS7.All).Concat(PKCS9.All).Concat(PKCS12.All);
                        }

                        /// <summary>
                        /// 1.2.840.113549.2
                        /// </summary>
                        public static class DigestAlgorithm
                        {
                            public static OID MD2 = new OID("1.2.840.113549.2.2", "md2");
                            public static OID MD4 = new OID("1.2.840.113549.2.4", "md4");
                            public static OID MD5 = new OID("1.2.840.113549.2.5", "md5");
                            public static OID HMACWithSHA1 = new OID("1.2.840.113549.2.7", "hmacWithSHA1");
                            public static OID HMACWithSHA224 = new OID("1.2.840.113549.2.8", "hmacWithSHA224");
                            public static OID HMACWithSHA256 = new OID("1.2.840.113549.2.9", "hmacWithSHA256");
                            public static OID HMACWithSHA384 = new OID("1.2.840.113549.2.10", "hmacWithSHA384");
                            public static OID HMACWithSHA512 = new OID("1.2.840.113549.2.11", "hmacWithSHA512");
                            public static OID HHMACWithSHA512_224 = new OID("1.2.840.113549.2.12", "hhmacWithSHA512-224");
                            public static OID HHMACWithSHA512_256 = new OID("1.2.840.113549.2.13", "hhmacWithSHA512-256");

                            public static IEnumerable<OID> All => new OID[]
                            {
                                MD2,
                                MD4,
                                MD5,
                                HMACWithSHA1,
                                HMACWithSHA224,
                                HMACWithSHA256,
                                HMACWithSHA384,
                                HMACWithSHA512,
                                HHMACWithSHA512_224,
                                HHMACWithSHA512_256,
                            };
                        }

                        /// <summary>
                        /// 1.2.840.113549.3
                        /// </summary>
                        public static class EncryptionAlgorithm
                        {
                            public static OID RC2CBC = new OID("1.2.840.113549.3.2", "rc2-cbc");
                            public static OID RC2ECB = new OID("1.2.840.113549.3.3", "rc2ECB");
                            public static OID RC4 = new OID("1.2.840.113549.3.4", "rc4");
                            public static OID RC4WithMAC = new OID("1.2.840.113549.3.5", "rc4WithMAC");
                            public static OID DESXCBC = new OID("1.2.840.113549.3.6", "desx-CBC");
                            public static OID DESEDE3CBC = new OID("1.2.840.113549.3.7", "des-ede3-cbc");
                            public static OID RC5CBC = new OID("1.2.840.113549.3.8", "rc5CBC");
                            public static OID RC5CBCPad = new OID("1.2.840.113549.3.9", "rc5-CBCPad");
                            public static OID DESCDMF = new OID("1.2.840.113549.3.10", "desCDMF");

                            public static IEnumerable<OID> All => new OID[]
                            {
                                RC2CBC,
                                RC2ECB,
                                RC4,
                                RC4WithMAC,
                                DESXCBC,
                                DESEDE3CBC,
                                RC5CBC,
                                RC5CBCPad,
                                DESCDMF,
                            };
                        }

                        public static IEnumerable<OID> All => (PKCS.All).Concat(DigestAlgorithm.All).Concat(EncryptionAlgorithm.All);
                    }

                    public static IEnumerable<OID> All => (X957.All).Concat(ANSI_X962.All).Concat(RSADSI.All);
                }

                public static IEnumerable<OID> All => (RU.All).Concat(US.All);
            }

            /// <summary>
            /// 1.3
            /// </summary>
            public static class IdentifiedOrganization
            {
                /// <summary>
                /// 1.3.6
                /// </summary>
                public static class DOD
                {
                    /// <summary>
                    /// 1.3.6.1
                    /// </summary>
                    public static class Internet
                    {
                        /// <summary>
                        /// 1.3.6.1.4
                        /// </summary>
                        public static class Private
                        {
                            /// <summary>
                            /// 1.3.6.1.4.1
                            /// </summary>
                            public static class Enterprise
                            {
                                /// <summary>
                                /// 1.3.6.1.4.1.311
                                /// </summary>
                                public static class Microsoft
                                {
                                    /// <summary>
                                    /// 1.3.6.1.4.1.311.60
                                    /// </summary>
                                    public static class EV
                                    {
                                        /// <summary>
                                        /// 1.3.6.1.4.1.311.60.2
                                        /// </summary>
                                        public static class _2
                                        {
                                            /// <summary>
                                            /// 1.3.6.1.4.1.311.60.2.1
                                            /// </summary>
                                            public static class _1
                                            {
                                                public static OID JurisdictionOfIncorporationLocalityName = new OID("1.3.6.1.4.1.311.60.2.1.1", "jurisdictionOfIncorporationLocalityName");
                                                public static OID JurisdictionOfIncorporationStateOrProvinceName = new OID("1.3.6.1.4.1.311.60.2.1.2", "jurisdictionOfIncorporationStateOrProvinceName");
                                                public static OID JurisdictionOfIncorporationCountryName = new OID("1.3.6.1.4.1.311.60.2.1.3", "jurisdictionOfIncorporationCountryName");

                                                public static IEnumerable<OID> All => new OID[]
                                                {
                                                    JurisdictionOfIncorporationLocalityName,
                                                    JurisdictionOfIncorporationStateOrProvinceName,
                                                    JurisdictionOfIncorporationCountryName,
                                                };
                                            }

                                            public static IEnumerable<OID> All => (_1.All);
                                        }

                                        public static IEnumerable<OID> All => (_2.All);
                                    }

                                    public static IEnumerable<OID> All => (EV.All);
                                }

                                public static IEnumerable<OID> All => (Microsoft.All);
                            }

                            public static IEnumerable<OID> All => (Enterprise.All);
                        }

                        /// <summary>
                        /// 1.3.6.1.5
                        /// </summary>
                        public static class Security
                        {
                            /// <summary>
                            /// 1.3.6.1.5.5
                            /// </summary>
                            public static class Mechanisms
                            {
                                /// <summary>
                                /// 1.3.6.1.5.5.7
                                /// </summary>
                                public static class PKIX
                                {
                                    /// <summary>
                                    /// 1.3.6.1.5.5.7.1
                                    /// </summary>
                                    public static class PE
                                    {
                                        public static OID AuthorityInfoAccess = new OID("1.3.6.1.5.5.7.1.1", "authorityInfoAccess");
                                        public static OID BiometricInfo = new OID("1.3.6.1.5.5.7.1.2", "biometricInfo");
                                        public static OID QCStatements = new OID("1.3.6.1.5.5.7.1.3", "qcStatements");
                                        public static OID AuditIdentity = new OID("1.3.6.1.5.5.7.1.4", "auditIdentity");
                                        public static OID ACTargeting = new OID("1.3.6.1.5.5.7.1.5", "id-pe-acTargeting");
                                        public static OID AAControls = new OID("1.3.6.1.5.5.7.1.6", "aaControls");
                                        public static OID SBGPRouterIdentifier = new OID("1.3.6.1.5.5.7.1.9", "id-pe-sbgp-routerIdentifier");
                                        public static OID Proxying = new OID("1.3.6.1.5.5.7.1.10", "proxying");
                                        public static OID SubjectInfoAccess = new OID("1.3.6.1.5.5.7.1.11", "subjectInfoAccess");
                                        public static OID Logotype = new OID("1.3.6.1.5.5.7.1.12", "id-pe-logotype");
                                        public static OID WLANSSID = new OID("1.3.6.1.5.5.7.1.13", "id-pe-wlanSSID");
                                        public static OID ProxyCertInfo = new OID("1.3.6.1.5.5.7.1.14", "id-pe-proxyCertInfo");
                                        public static OID ACPolicies = new OID("1.3.6.1.5.5.7.1.15", "15");
                                        public static OID Warranty = new OID("1.3.6.1.5.5.7.1.16", "16");
                                        public static OID Sim = new OID("1.3.6.1.5.5.7.1.17", "id-pe-sim");
                                        public static OID ClearanceConstraints = new OID("1.3.6.1.5.5.7.1.21", "id-pe-clearanceConstraints");
                                        public static OID SkiSemantics = new OID("1.3.6.1.5.5.7.1.22", "id-pe-skiSemantics");
                                        public static OID NSA = new OID("1.3.6.1.5.5.7.1.23", "nsa");
                                        public static OID TlsFeature = new OID("1.3.6.1.5.5.7.1.24", "id-pe-tlsfeature");
                                        public static OID MUDUrl = new OID("1.3.6.1.5.5.7.1.25", "id-pe-mud-url");
                                        public static OID TNAuthList = new OID("1.3.6.1.5.5.7.1.26", "id-pe-TNAuthList");
                                        public static OID JWTClaimConstraints = new OID("1.3.6.1.5.5.7.1.27", "id-pe-JWTClaimConstraints");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            AuthorityInfoAccess,
                                            BiometricInfo,
                                            QCStatements,
                                            AuditIdentity,
                                            ACTargeting,
                                            AAControls,
                                            SBGPRouterIdentifier,
                                            Proxying,
                                            SubjectInfoAccess,
                                            Logotype,
                                            WLANSSID,
                                            ProxyCertInfo,
                                            ACPolicies,
                                            Warranty,
                                            Sim,
                                            ClearanceConstraints,
                                            SkiSemantics,
                                            NSA,
                                            TlsFeature,
                                            MUDUrl,
                                            TNAuthList,
                                            JWTClaimConstraints,
                                        };
                                    }

                                    /// <summary>
                                    /// 1.3.6.1.5.5.7.2
                                    /// </summary>
                                    public static class QT
                                    {
                                        public static OID CPS = new OID("1.3.6.1.5.5.7.2.1", "cps");
                                        public static OID UNotice = new OID("1.3.6.1.5.5.7.2.2", "unotice");
                                        public static OID TextNotice = new OID("1.3.6.1.5.5.7.2.3", "textNotice");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            CPS,
                                            UNotice,
                                            TextNotice,
                                        };
                                    }

                                    /// <summary>
                                    /// 1.3.6.1.5.5.7.3
                                    /// </summary>
                                    public static class KP
                                    {
                                        public static OID ServerAuth = new OID("1.3.6.1.5.5.7.3.1", "serverAuth");
                                        public static OID ClientAuth = new OID("1.3.6.1.5.5.7.3.2", "clientAuth");
                                        public static OID CodeSigning = new OID("1.3.6.1.5.5.7.3.3", "codeSigning");
                                        public static OID EmailProtection = new OID("1.3.6.1.5.5.7.3.4", "emailProtection");
                                        public static OID IPsecEndSystem = new OID("1.3.6.1.5.5.7.3.5", "id-kp-ipsecEndSystem");
                                        public static OID IPsecTunnel = new OID("1.3.6.1.5.5.7.3.6", "id-kp-ipsecTunnel");
                                        public static OID IPsecUser = new OID("1.3.6.1.5.5.7.3.7", "id-kp-ipsecUser");
                                        public static OID TimeStamping = new OID("1.3.6.1.5.5.7.3.8", "timeStamping");
                                        public static OID OCSPSigning = new OID("1.3.6.1.5.5.7.3.9", "ocspSigning");
                                        public static OID DVCS = new OID("1.3.6.1.5.5.7.3.10", "dvcs");
                                        public static OID SBGPCertAAServerAuth = new OID("1.3.6.1.5.5.7.3.11", "id-kp-sbgpCertAAServerAuth");
                                        public static OID SCVPResponder = new OID("1.3.6.1.5.5.7.3.12", "id-kp-scvp-responder");
                                        public static OID EAPOverPPP = new OID("1.3.6.1.5.5.7.3.13", "id-kp-eapOverPPP");
                                        public static OID EAPOverLAN = new OID("1.3.6.1.5.5.7.3.14", "id-kp-eapOverLAN");
                                        public static OID SCVPServer = new OID("1.3.6.1.5.5.7.3.15", "id-kp-scvpServer");
                                        public static OID SCVPClient = new OID("1.3.6.1.5.5.7.3.16", "id-kp-scvpClient");
                                        public static OID IPsecIKE = new OID("1.3.6.1.5.5.7.3.17", "id-kp-ipsecIKE");
                                        public static OID CAPWAPWTP = new OID("1.3.6.1.5.5.7.3.19", "id-kp-capwapWTP");
                                        public static OID SIPDomain = new OID("1.3.6.1.5.5.7.3.20", "id-kp-sipDomain");
                                        public static OID SecureShellClient = new OID("1.3.6.1.5.5.7.3.21", "secureShellClient");
                                        public static OID SecureShellServer = new OID("1.3.6.1.5.5.7.3.22", "secureShellServer");
                                        public static OID CMCCA = new OID("1.3.6.1.5.5.7.3.27", "id-kp-cmcCA");
                                        public static OID CMCRA = new OID("1.3.6.1.5.5.7.3.28", "id-kp-cmcRA");
                                        public static OID CMCArchive = new OID("1.3.6.1.5.5.7.3.29", "id-kp-cmcArchive");
                                        public static OID BGPsecRouter = new OID("1.3.6.1.5.5.7.3.30", "id-kp-bgpsec-router");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            ServerAuth,
                                            ClientAuth,
                                            CodeSigning,
                                            EmailProtection,
                                            IPsecEndSystem,
                                            IPsecTunnel,
                                            IPsecUser,
                                            TimeStamping,
                                            OCSPSigning,
                                            DVCS,
                                            SBGPCertAAServerAuth,
                                            SCVPResponder,
                                            EAPOverPPP,
                                            EAPOverLAN,
                                            SCVPServer,
                                            SCVPClient,
                                            IPsecIKE,
                                            CAPWAPWTP,
                                            SIPDomain,
                                            SecureShellClient,
                                            SecureShellServer,
                                            CMCCA,
                                            CMCRA,
                                            CMCArchive,
                                            BGPsecRouter,
                                        };
                                    }

                                    /// <summary>
                                    /// 1.3.6.1.5.5.7.48
                                    /// </summary>
                                    public static class AD
                                    {
                                        public static OID OCSP = new OID("1.3.6.1.5.5.7.48.1", "ocsp");
                                        public static OID CAIssuers = new OID("1.3.6.1.5.5.7.48.2", "caIssuers");
                                        public static OID Timestamping = new OID("1.3.6.1.5.5.7.48.3", "timestamping");
                                        public static OID DVCS = new OID("1.3.6.1.5.5.7.48.4", "id-ad-dvcs");
                                        public static OID CARepository = new OID("1.3.6.1.5.5.7.48.5", "id-ad-caRepository");
                                        public static OID ArchiveCutoff = new OID("1.3.6.1.5.5.7.48.6", "id-pkix-ocsp-archive-cutoff");
                                        public static OID ServiceLocator = new OID("1.3.6.1.5.5.7.48.7", "id-pkix-ocsp-service-locator");
                                        public static OID XKMS = new OID("1.3.6.1.5.5.7.48.8", "id-ad-xkms");
                                        public static OID SignedObjectRepository = new OID("1.3.6.1.5.5.7.48.9", "id-ad-signedObjectRepository");
                                        public static OID RPKIManifest = new OID("1.3.6.1.5.5.7.48.10", "id-ad-rpkiManifest");
                                        public static OID SignedObject = new OID("1.3.6.1.5.5.7.48.11", "id-ad-signedObject");
                                        public static OID CMC = new OID("1.3.6.1.5.5.7.48.12", "id-ad-cmc");
                                        public static OID RPKINotify = new OID("1.3.6.1.5.5.7.48.13", "id-ad-rpkiNotify");
                                        public static OID StirTNList = new OID("1.3.6.1.5.5.7.48.14", "id-ad-stirTNList");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            OCSP,
                                            CAIssuers,
                                            Timestamping,
                                            DVCS,
                                            CARepository,
                                            ArchiveCutoff,
                                            ServiceLocator,
                                            XKMS,
                                            SignedObjectRepository,
                                            RPKIManifest,
                                            SignedObject,
                                            CMC,
                                            RPKINotify,
                                            StirTNList,
                                        };
                                    }

                                    public static IEnumerable<OID> All => (PE.All).Concat(QT.All).Concat(KP.All).Concat(AD.All);
                                }

                                public static IEnumerable<OID> All => (PKIX.All);
                            }

                            public static IEnumerable<OID> All => (Mechanisms.All);
                        }

                        public static IEnumerable<OID> All => (Private.All).Concat(Security.All);
                    }

                    public static IEnumerable<OID> All => (Internet.All);
                }

                /// <summary>
                /// 1.3.14
                /// </summary>
                public static class OIW
                {
                    /// <summary>
                    /// 1.3.14.3
                    /// </summary>
                    public static class SECSIG
                    {
                        /// <summary>
                        /// 1.3.14.3.2
                        /// </summary>
                        public static class Algorithms
                        {
                            public static OID RSA = new OID("1.3.14.3.2.1", "rsa");
                            public static OID MD4WithRSA = new OID("1.3.14.3.2.2", "md4WithRSA");
                            public static OID MD5WithRSA = new OID("1.3.14.3.2.3", "md5WithRSA");
                            public static OID MD4WithRSAEncryption = new OID("1.3.14.3.2.4", "md4WithRSAEncryption");
                            public static OID DESECB = new OID("1.3.14.3.2.6", "desECB");
                            public static OID DESCBC = new OID("1.3.14.3.2.7", "desCBC");
                            public static OID DESOFB = new OID("1.3.14.3.2.8", "desOFB");
                            public static OID DESCFB = new OID("1.3.14.3.2.9", "desCFB");
                            public static OID DESMAC = new OID("1.3.14.3.2.10", "desMAC");
                            public static OID RSASignature = new OID("1.3.14.3.2.11", "rsaSignature");
                            public static OID DSA = new OID("1.3.14.3.2.12", "dsa");
                            public static OID DSAWithSHA = new OID("1.3.14.3.2.13", "dsaWithSHA");
                            public static OID MDC2WithRSASignature = new OID("1.3.14.3.2.14", "mdc2WithRSASignature");
                            public static OID SHAWithRSASignature = new OID("1.3.14.3.2.15", "shaWithRSASignature");
                            public static OID DHWithCommonModulus = new OID("1.3.14.3.2.16", "dhWithCommonModulus");
                            public static OID DESEDE = new OID("1.3.14.3.2.17", "desEDE");
                            public static OID SHA = new OID("1.3.14.3.2.18", "sha");
                            public static OID MDC2 = new OID("1.3.14.3.2.19", "mdc-2");
                            public static OID DSACommon = new OID("1.3.14.3.2.20", "dsaCommon");
                            public static OID DSACommonWithSHA = new OID("1.3.14.3.2.21", "dsaCommonWithSHA");
                            public static OID RSAKeyTransport = new OID("1.3.14.3.2.22", "rsa-key-transport");
                            public static OID KeyedHashSeal = new OID("1.3.14.3.2.23", "keyed-hash-seal");
                            public static OID MD2WithRSASignature = new OID("1.3.14.3.2.24", "md2WithRSASignature");
                            public static OID MD5WithRSASignature = new OID("1.3.14.3.2.25", "md5WithRSASignature");
                            public static OID SHA1 = new OID("1.3.14.3.2.26", "sha-1");
                            public static OID DSAWithSHA1 = new OID("1.3.14.3.2.27", "dsaWithSHA1");
                            public static OID DSAWithCommonSHA1 = new OID("1.3.14.3.2.28", "dsaWithCommonSHA1");
                            public static OID SHA1WithRSAEncryption = new OID("1.3.14.3.2.29", "sha-1WithRSAEncryption");

                            public static IEnumerable<OID> All => new OID[]
                            {
                                RSA,
                                MD4WithRSA,
                                MD5WithRSA,
                                MD4WithRSAEncryption,
                                DESECB,
                                DESCBC,
                                DESOFB,
                                DESCFB,
                                DESMAC,
                                RSASignature,
                                DSA,
                                DSAWithSHA,
                                MDC2WithRSASignature,
                                SHAWithRSASignature,
                                DHWithCommonModulus,
                                DESEDE,
                                SHA,
                                MDC2,
                                DSACommon,
                                DSACommonWithSHA,
                                RSAKeyTransport,
                                KeyedHashSeal,
                                MD2WithRSASignature,
                                MD5WithRSASignature,
                                SHA1,
                                DSAWithSHA1,
                                DSAWithCommonSHA1,
                                SHA1WithRSAEncryption,
                            };
                        }

                        public static IEnumerable<OID> All => (Algorithms.All);
                    }

                    public static IEnumerable<OID> All => (SECSIG.All);
                }

                /// <summary>
                /// 1.3.132
                /// </summary>
                public static class Certicom
                {
                    /// <summary>
                    /// 1.3.132.0
                    /// </summary>
                    public static class Curve
                    {
                        public static OID sect163k1 = new OID("1.3.132.0.1", "sect163k1");
                        public static OID sect163r1 = new OID("1.3.132.0.2", "sect163r1");
                        public static OID sect239k1 = new OID("1.3.132.0.3", "sect239k1");
                        public static OID sect113r1 = new OID("1.3.132.0.4", "sect113r1");
                        public static OID sect113r2 = new OID("1.3.132.0.5", "sect113r2");
                        public static OID secp112r1 = new OID("1.3.132.0.6", "secp112r1");
                        public static OID secp112r2 = new OID("1.3.132.0.7", "secp112r2");
                        public static OID secp160r1 = new OID("1.3.132.0.8", "secp160r1");
                        public static OID secp160k1 = new OID("1.3.132.0.9", "secp160k1");
                        public static OID secp256k1 = new OID("1.3.132.0.10", "secp256k1");
                        public static OID sect163r2 = new OID("1.3.132.0.15", "sect163r2");
                        public static OID sect283k1 = new OID("1.3.132.0.16", "sect283k1");
                        public static OID sect283r1 = new OID("1.3.132.0.17", "sect283r1");
                        public static OID sect131r1 = new OID("1.3.132.0.22", "sect131r1");
                        public static OID sect131r2 = new OID("1.3.132.0.23", "sect131r2");
                        public static OID sect193r1 = new OID("1.3.132.0.24", "sect193r1");
                        public static OID sect193r2 = new OID("1.3.132.0.25", "sect193r2");
                        public static OID sect233k1 = new OID("1.3.132.0.26", "sect233k1");
                        public static OID sect233r1 = new OID("1.3.132.0.27", "sect233r1");
                        public static OID secp128r1 = new OID("1.3.132.0.28", "secp128r1");
                        public static OID secp128r2 = new OID("1.3.132.0.29", "secp128r2");
                        public static OID secp160r2 = new OID("1.3.132.0.30", "secp160r2");
                        public static OID secp192k1 = new OID("1.3.132.0.31", "secp192k1");
                        public static OID secp224k1 = new OID("1.3.132.0.32", "secp224k1");
                        public static OID secp224r1 = new OID("1.3.132.0.33", "secp224r1");
                        public static OID secp384r1 = new OID("1.3.132.0.34", "secp384r1");
                        public static OID secp521r1 = new OID("1.3.132.0.35", "secp521r1");
                        public static OID sect409k1 = new OID("1.3.132.0.36", "sect409k1");
                        public static OID sect409r1 = new OID("1.3.132.0.37", "sect409r1");
                        public static OID sect571k1 = new OID("1.3.132.0.38", "sect571k1");
                        public static OID sect571r1 = new OID("1.3.132.0.39", "sect571r1");

                        public static IEnumerable<OID> All => new OID[]
                        {
                            sect163k1,
                            sect163r1,
                            sect239k1,
                            sect113r1,
                            sect113r2,
                            secp112r1,
                            secp112r2,
                            secp160r1,
                            secp160k1,
                            secp256k1,
                            sect163r2,
                            sect283k1,
                            sect283r1,
                            sect131r1,
                            sect131r2,
                            sect193r1,
                            sect193r2,
                            sect233k1,
                            sect233r1,
                            secp128r1,
                            secp128r2,
                            secp160r2,
                            secp192k1,
                            secp224k1,
                            secp224r1,
                            secp384r1,
                            secp521r1,
                            sect409k1,
                            sect409r1,
                            sect571k1,
                            sect571r1,
                        };
                    }

                    public static IEnumerable<OID> All => (Curve.All);
                }

                public static IEnumerable<OID> All => (DOD.All).Concat(OIW.All).Concat(Certicom.All);
            }

            public static IEnumerable<OID> All => (MemberBody.All).Concat(IdentifiedOrganization.All);
        }

        /// <summary>
        /// 2
        /// </summary>
        public static class JointISOITUT
        {
            /// <summary>
            /// 2.5
            /// </summary>
            public static class DS
            {
                /// <summary>
                /// 2.5.4
                /// </summary>
                public static class AttributeType
                {
                    public static OID ObjectClass = new OID("2.5.4.0", "objectClass");
                    public static OID AliasedEntryName = new OID("2.5.4.1", "aliasedEntryName");
                    public static OID KnowledgeInformation = new OID("2.5.4.2", "knowledgeInformation");
                    public static OID CommonName = new OID("2.5.4.3", "commonName", "CN");
                    public static OID Surname = new OID("2.5.4.4", "surname");
                    public static OID SerialNumber = new OID("2.5.4.5", "serialNumber", "SERIALNUMBER");
                    public static OID CountryName = new OID("2.5.4.6", "countryName", "C");
                    public static OID LocalityName = new OID("2.5.4.7", "localityName", "L");
                    public static OID StateOrProvinceName = new OID("2.5.4.8", "stateOrProvinceName", "ST");
                    public static OID StreetAddress = new OID("2.5.4.9", "streetAddress", "STREET");
                    public static OID OrganizationName = new OID("2.5.4.10", "organizationName", "O");
                    public static OID OrganizationalUnitName = new OID("2.5.4.11", "organizationalUnitName", "OU");
                    public static OID Title = new OID("2.5.4.12", "title");
                    public static OID Description = new OID("2.5.4.13", "description");
                    public static OID SearchGuide = new OID("2.5.4.14", "searchGuide");
                    public static OID BusinessCategory = new OID("2.5.4.15", "businessCategory");
                    public static OID PostalAddress = new OID("2.5.4.16", "postalAddress");
                    public static OID PostalCode = new OID("2.5.4.17", "postalCode", "PostalCode");
                    public static OID PostOfficeBox = new OID("2.5.4.18", "postOfficeBox");
                    public static OID PhysicalDeliveryOfficeName = new OID("2.5.4.19", "physicalDeliveryOfficeName");
                    public static OID TelephoneNumber = new OID("2.5.4.20", "telephoneNumber");
                    public static OID TelexNumber = new OID("2.5.4.21", "telexNumber");
                    public static OID TeletexTerminalIdentifier = new OID("2.5.4.22", "teletexTerminalIdentifier");
                    public static OID FacsimileTelephoneNumber = new OID("2.5.4.23", "facsimileTelephoneNumber");
                    public static OID X121Address = new OID("2.5.4.24", "x121Address");
                    public static OID InternationalISDNNumber = new OID("2.5.4.25", "internationalISDNNumber");
                    public static OID RegisteredAddress = new OID("2.5.4.26", "registeredAddress");
                    public static OID DestinationIndicator = new OID("2.5.4.27", "destinationIndicator");
                    public static OID PreferredDeliveryMethod = new OID("2.5.4.28", "preferredDeliveryMethod");
                    public static OID PresentationAddress = new OID("2.5.4.29", "presentationAddress");
                    public static OID SupportedApplicationContext = new OID("2.5.4.30", "supportedApplicationContext");
                    public static OID Member = new OID("2.5.4.31", "member");
                    public static OID Owner = new OID("2.5.4.32", "owner");
                    public static OID RoleOccupant = new OID("2.5.4.33", "roleOccupant");
                    public static OID SeeAlso = new OID("2.5.4.34", "seeAlso");
                    public static OID UserPassword = new OID("2.5.4.35", "userPassword");
                    public static OID UserCertificate = new OID("2.5.4.36", "userCertificate");
                    public static OID CACertificate = new OID("2.5.4.37", "cACertificate");
                    public static OID AuthorityRevocationList = new OID("2.5.4.38", "authorityRevocationList");
                    public static OID CertificateRevocationList = new OID("2.5.4.39", "certificateRevocationList");
                    public static OID CrossCertificatePair = new OID("2.5.4.40", "crossCertificatePair");
                    public static OID Name = new OID("2.5.4.41", "name");
                    public static OID GivenName = new OID("2.5.4.42", "givenName");
                    public static OID Initials = new OID("2.5.4.43", "initials");
                    public static OID GenerationQualifier = new OID("2.5.4.44", "generationQualifier");
                    public static OID UniqueIdentifier = new OID("2.5.4.45", "uniqueIdentifier");
                    public static OID DNQualifier = new OID("2.5.4.46", "dnQualifier");
                    public static OID EnhancedSearchGuide = new OID("2.5.4.47", "enhancedSearchGuide");
                    public static OID ProtocolInformation = new OID("2.5.4.48", "protocolInformation");
                    public static OID DistinguishedName = new OID("2.5.4.49", "distinguishedName");
                    public static OID UniqueMember = new OID("2.5.4.50", "uniqueMember");
                    public static OID HouseIdentifier = new OID("2.5.4.51", "houseIdentifier");
                    public static OID SupportedAlgorithms = new OID("2.5.4.52", "supportedAlgorithms");
                    public static OID DeltaRevocationList = new OID("2.5.4.53", "deltaRevocationList");
                    public static OID DMDName = new OID("2.5.4.54", "dmdName");
                    public static OID Clearance = new OID("2.5.4.55", "clearance");
                    public static OID DefaultDirQop = new OID("2.5.4.56", "defaultDirQop");
                    public static OID AttributeIntegrityInfo = new OID("2.5.4.57", "attributeIntegrityInfo");
                    public static OID AttributeCertificate = new OID("2.5.4.58", "attributeCertificate");
                    public static OID AttributeCertificateRevocationList = new OID("2.5.4.59", "attributeCertificateRevocationList");
                    public static OID ConfKeyInfo = new OID("2.5.4.60", "confKeyInfo");
                    public static OID AACertificate = new OID("2.5.4.61", "aACertificate");
                    public static OID AttributeDescriptorCertificate = new OID("2.5.4.62", "attributeDescriptorCertificate");
                    public static OID AttributeAuthorityRevocationList = new OID("2.5.4.63", "attributeAuthorityRevocationList");
                    public static OID FamilyInformation = new OID("2.5.4.64", "family-information");
                    public static OID Pseudonym = new OID("2.5.4.65", "pseudonym");
                    public static OID CommunicationsService = new OID("2.5.4.66", "communicationsService");
                    public static OID CommunicationsNetwork = new OID("2.5.4.67", "communicationsNetwork");
                    public static OID CertificationPracticeStmt = new OID("2.5.4.68", "certificationPracticeStmt");
                    public static OID CertificatePolicy = new OID("2.5.4.69", "certificatePolicy");
                    public static OID PKIPath = new OID("2.5.4.70", "pkiPath");
                    public static OID PrivPolicy = new OID("2.5.4.71", "privPolicy");
                    public static OID Role = new OID("2.5.4.72", "role");
                    public static OID DelegationPath = new OID("2.5.4.73", "delegationPath");
                    public static OID ProtPrivPolicy = new OID("2.5.4.74", "protPrivPolicy");
                    public static OID XMLPrivilegeInfo = new OID("2.5.4.75", "xMLPrivilegeInfo");
                    public static OID XMLPrivPolicy = new OID("2.5.4.76", "xmlPrivPolicy");
                    public static OID UUIDPair = new OID("2.5.4.77", "uuidpair");
                    public static OID TagOid = new OID("2.5.4.78", "tagOid");
                    public static OID UIIFormat = new OID("2.5.4.79", "uiiFormat");
                    public static OID UIIInUrh = new OID("2.5.4.80", "uiiInUrh");
                    public static OID ContentUrl = new OID("2.5.4.81", "contentUrl");
                    public static OID Permission = new OID("2.5.4.82", "permission");
                    public static OID Uri = new OID("2.5.4.83", "uri");
                    public static OID PwdAttribute = new OID("2.5.4.84", "pwdAttribute");
                    public static OID UserPwd = new OID("2.5.4.85", "userPwd");
                    public static OID Urn = new OID("2.5.4.86", "urn");
                    public static OID Url = new OID("2.5.4.87", "url");
                    public static OID UTMCoordinates = new OID("2.5.4.88", "utmCoordinates");
                    public static OID UrnC = new OID("2.5.4.89", "urnC");
                    public static OID Uii = new OID("2.5.4.90", "uii");
                    public static OID Epc = new OID("2.5.4.91", "epc");
                    public static OID TagAfi = new OID("2.5.4.92", "tagAfi");
                    public static OID EpcFormat = new OID("2.5.4.93", "epcFormat");
                    public static OID EpcInUrn = new OID("2.5.4.94", "epcInUrn");
                    public static OID LDAPUrl = new OID("2.5.4.95", "ldapUrl");
                    public static OID OrganizationIdentifier = new OID("2.5.4.97", "organizationIdentifier");

                    public static IEnumerable<OID> All => new OID[]
                    {
                        ObjectClass,
                        AliasedEntryName,
                        KnowledgeInformation,
                        CommonName,
                        Surname,
                        SerialNumber,
                        CountryName,
                        LocalityName,
                        StateOrProvinceName,
                        StreetAddress,
                        OrganizationName,
                        OrganizationalUnitName,
                        Title,
                        Description,
                        SearchGuide,
                        BusinessCategory,
                        PostalAddress,
                        PostalCode,
                        PostOfficeBox,
                        PhysicalDeliveryOfficeName,
                        TelephoneNumber,
                        TelexNumber,
                        TeletexTerminalIdentifier,
                        FacsimileTelephoneNumber,
                        X121Address,
                        InternationalISDNNumber,
                        RegisteredAddress,
                        DestinationIndicator,
                        PreferredDeliveryMethod,
                        PresentationAddress,
                        SupportedApplicationContext,
                        Member,
                        Owner,
                        RoleOccupant,
                        SeeAlso,
                        UserPassword,
                        UserCertificate,
                        CACertificate,
                        AuthorityRevocationList,
                        CertificateRevocationList,
                        CrossCertificatePair,
                        Name,
                        GivenName,
                        Initials,
                        GenerationQualifier,
                        UniqueIdentifier,
                        DNQualifier,
                        EnhancedSearchGuide,
                        ProtocolInformation,
                        DistinguishedName,
                        UniqueMember,
                        HouseIdentifier,
                        SupportedAlgorithms,
                        DeltaRevocationList,
                        DMDName,
                        Clearance,
                        DefaultDirQop,
                        AttributeIntegrityInfo,
                        AttributeCertificate,
                        AttributeCertificateRevocationList,
                        ConfKeyInfo,
                        AACertificate,
                        AttributeDescriptorCertificate,
                        AttributeAuthorityRevocationList,
                        FamilyInformation,
                        Pseudonym,
                        CommunicationsService,
                        CommunicationsNetwork,
                        CertificationPracticeStmt,
                        CertificatePolicy,
                        PKIPath,
                        PrivPolicy,
                        Role,
                        DelegationPath,
                        ProtPrivPolicy,
                        XMLPrivilegeInfo,
                        XMLPrivPolicy,
                        UUIDPair,
                        TagOid,
                        UIIFormat,
                        UIIInUrh,
                        ContentUrl,
                        Permission,
                        Uri,
                        PwdAttribute,
                        UserPwd,
                        Urn,
                        Url,
                        UTMCoordinates,
                        UrnC,
                        Uii,
                        Epc,
                        TagAfi,
                        EpcFormat,
                        EpcInUrn,
                        LDAPUrl,
                        OrganizationIdentifier,
                    };
                }

                /// <summary>
                /// 2.5.29
                /// </summary>
                public static class CertificateExtension
                {
                    public static OID AuthorityKeyIdentifierObsolete = new OID("2.5.29.1", "authorityKeyIdentifier");
                    public static OID KeyAttributesObsolete = new OID("2.5.29.2", "keyAttributes");
                    public static OID CertificatePoliciesObsolete = new OID("2.5.29.3", "certificatePolicies");
                    public static OID KeyUsageRestrictionObsolete = new OID("2.5.29.4", "keyUsageRestriction");
                    public static OID PolicyMappingObsolete = new OID("2.5.29.5", "policyMapping");
                    public static OID SubtreesConstraintObsolete = new OID("2.5.29.6", "subtreesConstraint");
                    public static OID SubjectAltNameObsolete = new OID("2.5.29.7", "subjectAltName");
                    public static OID IssuerAltNameObsolete = new OID("2.5.29.8", "issuerAltName");
                    public static OID SubjectDirectoryAttributes = new OID("2.5.29.9", "subjectDirectoryAttributes");
                    public static OID BasicConstraintsObsolete = new OID("2.5.29.10", "basicConstraints");
                    public static OID SubjectKeyIdentifier = new OID("2.5.29.14", "subjectKeyIdentifier");
                    public static OID KeyUsage = new OID("2.5.29.15", "keyUsage");
                    public static OID PrivateKeyUsagePeriod = new OID("2.5.29.16", "privateKeyUsagePeriod");
                    public static OID SubjectAltName = new OID("2.5.29.17", "subjectAltName");
                    public static OID IssuerAltName = new OID("2.5.29.18", "issuerAltName");
                    public static OID BasicConstraints = new OID("2.5.29.19", "basicConstraints");
                    public static OID CRLNumber = new OID("2.5.29.20", "cRLNumber");
                    public static OID ReasonCode = new OID("2.5.29.21", "reasonCode");
                    public static OID ExpirationDate = new OID("2.5.29.22", "expirationDate");
                    public static OID InstructionCode = new OID("2.5.29.23", "instructionCode");
                    public static OID InvalidityDate = new OID("2.5.29.24", "invalidityDate");
                    public static OID CRLDistributionPointsObsolete = new OID("2.5.29.25", "cRLDistributionPoints");
                    public static OID IssuingDistributionPointObsolete = new OID("2.5.29.26", "issuingDistributionPoint");
                    public static OID DeltaCRLIndicator = new OID("2.5.29.27", "deltaCRLIndicator");
                    public static OID IssuingDistributionPoint = new OID("2.5.29.28", "issuingDistributionPoint");
                    public static OID CertificateIssuer = new OID("2.5.29.29", "certificateIssuer");
                    public static OID NameConstraints = new OID("2.5.29.30", "nameConstraints");
                    public static OID CRLDistributionPoints = new OID("2.5.29.31", "cRLDistributionPoints");
                    public static OID CertificatePolicies = new OID("2.5.29.32", "certificatePolicies");
                    public static OID PolicyMappings = new OID("2.5.29.33", "policyMappings");
                    public static OID PolicyConstraints1 = new OID("2.5.29.34", "policyConstraints");
                    public static OID AuthorityKeyIdentifier = new OID("2.5.29.35", "authorityKeyIdentifier");
                    public static OID PolicyConstraints2 = new OID("2.5.29.36", "policyConstraints");
                    public static OID ExtKeyUsage = new OID("2.5.29.37", "extKeyUsage");
                    public static OID AuthorityAttributeIdentifier = new OID("2.5.29.38", "authorityAttributeIdentifier");
                    public static OID RoleSpecCertIdentifier = new OID("2.5.29.39", "roleSpecCertIdentifier");
                    public static OID CRLStreamIdentifier = new OID("2.5.29.40", "cRLStreamIdentifier");
                    public static OID BasicAttConstraints = new OID("2.5.29.41", "basicAttConstraints");
                    public static OID DelegatedNameConstraints = new OID("2.5.29.42", "delegatedNameConstraints");
                    public static OID TimeSpecification = new OID("2.5.29.43", "timeSpecification");
                    public static OID CRLScope = new OID("2.5.29.44", "cRLScope");
                    public static OID StatusReferrals = new OID("2.5.29.45", "statusReferrals");
                    public static OID FreshestCRL = new OID("2.5.29.46", "freshestCRL");
                    public static OID OrderedList = new OID("2.5.29.47", "orderedList");
                    public static OID AttributeDescriptor = new OID("2.5.29.48", "attributeDescriptor");
                    public static OID UserNotice = new OID("2.5.29.49", "userNotice");
                    public static OID SOAIdentifier = new OID("2.5.29.50", "sOAIdentifier");
                    public static OID BaseUpdateTime = new OID("2.5.29.51", "baseUpdateTime");
                    public static OID AcceptableCertPolicies = new OID("2.5.29.52", "acceptableCertPolicies");
                    public static OID DeltaInfo = new OID("2.5.29.53", "deltaInfo");
                    public static OID InhibitAnyPolicy = new OID("2.5.29.54", "inhibitAnyPolicy");
                    public static OID TargetInformation = new OID("2.5.29.55", "targetInformation");
                    public static OID NoRevAvail = new OID("2.5.29.56", "noRevAvail");
                    public static OID AcceptablePrivilegePolicies = new OID("2.5.29.57", "acceptablePrivilegePolicies");
                    public static OID ToBeRevoked = new OID("2.5.29.58", "id-ce-toBeRevoked");
                    public static OID RevokedGroups = new OID("2.5.29.59", "id-ce-RevokedGroups");
                    public static OID ExpiredCertsOnCRL = new OID("2.5.29.60", "id-ce-expiredCertsOnCRL");
                    public static OID IndirectIssuer = new OID("2.5.29.61", "indirectIssuer");
                    public static OID NoAssertion = new OID("2.5.29.62", "id-ce-noAssertion");
                    public static OID AAissuingDistributionPoint = new OID("2.5.29.63", "id-ce-aAissuingDistributionPoint");
                    public static OID IssuedOnBehaIFOF = new OID("2.5.29.64", "id-ce-issuedOnBehaIFOF");
                    public static OID SingleUse = new OID("2.5.29.65", "id-ce-singleUse");
                    public static OID GroupAC = new OID("2.5.29.66", "id-ce-groupAC");
                    public static OID AllowedAttAss = new OID("2.5.29.67", "id-ce-allowedAttAss");
                    public static OID AttributeMappings = new OID("2.5.29.68", "id-ce-attributeMappings");
                    public static OID HolderNameConstraints = new OID("2.5.29.69", "id-ce-holderNameConstraints");

                    public static IEnumerable<OID> All => new OID[]
                    {
                        AuthorityKeyIdentifierObsolete,
                        KeyAttributesObsolete,
                        CertificatePoliciesObsolete,
                        KeyUsageRestrictionObsolete,
                        PolicyMappingObsolete,
                        SubtreesConstraintObsolete,
                        SubjectAltNameObsolete,
                        IssuerAltNameObsolete,
                        SubjectDirectoryAttributes,
                        BasicConstraintsObsolete,
                        SubjectKeyIdentifier,
                        KeyUsage,
                        PrivateKeyUsagePeriod,
                        SubjectAltName,
                        IssuerAltName,
                        BasicConstraints,
                        CRLNumber,
                        ReasonCode,
                        ExpirationDate,
                        InstructionCode,
                        InvalidityDate,
                        CRLDistributionPointsObsolete,
                        IssuingDistributionPointObsolete,
                        DeltaCRLIndicator,
                        IssuingDistributionPoint,
                        CertificateIssuer,
                        NameConstraints,
                        CRLDistributionPoints,
                        CertificatePolicies,
                        PolicyMappings,
                        PolicyConstraints1,
                        AuthorityKeyIdentifier,
                        PolicyConstraints2,
                        ExtKeyUsage,
                        AuthorityAttributeIdentifier,
                        RoleSpecCertIdentifier,
                        CRLStreamIdentifier,
                        BasicAttConstraints,
                        DelegatedNameConstraints,
                        TimeSpecification,
                        CRLScope,
                        StatusReferrals,
                        FreshestCRL,
                        OrderedList,
                        AttributeDescriptor,
                        UserNotice,
                        SOAIdentifier,
                        BaseUpdateTime,
                        AcceptableCertPolicies,
                        DeltaInfo,
                        InhibitAnyPolicy,
                        TargetInformation,
                        NoRevAvail,
                        AcceptablePrivilegePolicies,
                        ToBeRevoked,
                        RevokedGroups,
                        ExpiredCertsOnCRL,
                        IndirectIssuer,
                        NoAssertion,
                        AAissuingDistributionPoint,
                        IssuedOnBehaIFOF,
                        SingleUse,
                        GroupAC,
                        AllowedAttAss,
                        AttributeMappings,
                        HolderNameConstraints,
                    };
                }

                public static IEnumerable<OID> All => (AttributeType.All).Concat(CertificateExtension.All);
            }

            /// <summary>
            /// 2.16
            /// </summary>
            public static class Country
            {
                /// <summary>
                /// 2.16.840
                /// </summary>
                public static class US
                {
                    /// <summary>
                    /// 2.16.840.1
                    /// </summary>
                    public static class Organization
                    {
                        /// <summary>
                        /// 2.16.840.1.101
                        /// </summary>
                        public static class Gov
                        {
                            /// <summary>
                            /// 2.16.840.1.101.3
                            /// </summary>
                            public static class CSOR
                            {
                                /// <summary>
                                /// 2.16.840.1.101.3.4
                                /// </summary>
                                public static class NISTAlgorithm
                                {
                                    /// <summary>
                                    /// 2.16.840.1.101.3.4.1
                                    /// </summary>
                                    public static class AES
                                    {
                                        public static OID AES128ECB = new OID("2.16.840.1.101.3.4.1.1", "aes128-ECB");
                                        public static OID AES128CBC = new OID("2.16.840.1.101.3.4.1.2", "aes128-CBC");
                                        public static OID AES128OFB = new OID("2.16.840.1.101.3.4.1.3", "aes128-OFB");
                                        public static OID AES128CFB = new OID("2.16.840.1.101.3.4.1.4", "aes128-CFB");
                                        public static OID AES128Wrap = new OID("2.16.840.1.101.3.4.1.5", "id-aes128-wrap");
                                        public static OID AES128GCM = new OID("2.16.840.1.101.3.4.1.6", "aes128-GCM");
                                        public static OID AES128CCM = new OID("2.16.840.1.101.3.4.1.7", "aes128-CCM");
                                        public static OID AES128WrapPad = new OID("2.16.840.1.101.3.4.1.8", "aes128-wrap-pad");
                                        public static OID AES192ECB = new OID("2.16.840.1.101.3.4.1.21", "aes192-ECB");
                                        public static OID AES192CBC = new OID("2.16.840.1.101.3.4.1.22", "aes192-CBC");
                                        public static OID AES192OFB = new OID("2.16.840.1.101.3.4.1.23", "aes192-OFB");
                                        public static OID AES192CFB = new OID("2.16.840.1.101.3.4.1.24", "aes192-CFB");
                                        public static OID AES192Wrap = new OID("2.16.840.1.101.3.4.1.25", "id-aes192-wrap");
                                        public static OID AES192GCM = new OID("2.16.840.1.101.3.4.1.26", "aes192-GCM");
                                        public static OID AES192CCM = new OID("2.16.840.1.101.3.4.1.27", "aes192-CCM");
                                        public static OID AES192WrapPad = new OID("2.16.840.1.101.3.4.1.28", "aes192-wrap-pad");
                                        public static OID AES256ECB = new OID("2.16.840.1.101.3.4.1.41", "aes256-ECB");
                                        public static OID AES256CBC = new OID("2.16.840.1.101.3.4.1.42", "aes256-CBC");
                                        public static OID AES256OFB = new OID("2.16.840.1.101.3.4.1.43", "aes256-OFB");
                                        public static OID AES256CFB = new OID("2.16.840.1.101.3.4.1.44", "aes256-CFB");
                                        public static OID AES256Wrap = new OID("2.16.840.1.101.3.4.1.45", "id-aes256-wrap");
                                        public static OID AES256GCM = new OID("2.16.840.1.101.3.4.1.46", "aes256-GCM");
                                        public static OID AES256CCM = new OID("2.16.840.1.101.3.4.1.47", "aes256-CCM");
                                        public static OID AES256WrapPad = new OID("2.16.840.1.101.3.4.1.48", "aes256-wrap-pad");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            AES128ECB,
                                            AES128CBC,
                                            AES128OFB,
                                            AES128CFB,
                                            AES128Wrap,
                                            AES128GCM,
                                            AES128CCM,
                                            AES128WrapPad,
                                            AES192ECB,
                                            AES192CBC,
                                            AES192OFB,
                                            AES192CFB,
                                            AES192Wrap,
                                            AES192GCM,
                                            AES192CCM,
                                            AES192WrapPad,
                                            AES256ECB,
                                            AES256CBC,
                                            AES256OFB,
                                            AES256CFB,
                                            AES256Wrap,
                                            AES256GCM,
                                            AES256CCM,
                                            AES256WrapPad,
                                        };
                                    }

                                    /// <summary>
                                    /// 2.16.840.1.101.3.4.2
                                    /// </summary>
                                    public static class HashAlgs
                                    {
                                        public static OID SHA256 = new OID("2.16.840.1.101.3.4.2.1", "sha256");
                                        public static OID SHA384 = new OID("2.16.840.1.101.3.4.2.2", "sha384");
                                        public static OID SHA512 = new OID("2.16.840.1.101.3.4.2.3", "sha512");
                                        public static OID SHA224 = new OID("2.16.840.1.101.3.4.2.4", "sha224");
                                        public static OID SHA512_224 = new OID("2.16.840.1.101.3.4.2.5", "sha512-224");
                                        public static OID SHA512_256 = new OID("2.16.840.1.101.3.4.2.6", "sha512-256");

                                        public static IEnumerable<OID> All => new OID[]
                                        {
                                            SHA256,
                                            SHA384,
                                            SHA512,
                                            SHA224,
                                            SHA512_224,
                                            SHA512_256,
                                        };
                                    }

                                    public static IEnumerable<OID> All => (AES.All).Concat(HashAlgs.All);
                                }

                                public static IEnumerable<OID> All => (NISTAlgorithm.All);
                            }

                            public static IEnumerable<OID> All => (CSOR.All);
                        }

                        /// <summary>
                        /// 2.16.840.1.114412
                        /// </summary>
                        public static class DigiCert
                        {
                            /// <summary>
                            /// 2.16.840.1.114412.2
                            /// </summary>
                            public static class EVSSLCertificates
                            {
                                public static OID DigiCertEVCPS = new OID("2.16.840.1.114412.2.1", "1");

                                public static IEnumerable<OID> All => new OID[]
                                {
                                    DigiCertEVCPS,
                                };
                            }

                            public static IEnumerable<OID> All => (EVSSLCertificates.All);
                        }

                        public static IEnumerable<OID> All => (Gov.All).Concat(DigiCert.All);
                    }

                    public static IEnumerable<OID> All => (Organization.All);
                }

                public static IEnumerable<OID> All => (US.All);
            }

            /// <summary>
            /// 2.23
            /// </summary>
            public static class InternationalOrganizations
            {
                /// <summary>
                /// 2.23.140
                /// </summary>
                public static class CABrowserForum
                {
                    /// <summary>
                    /// 2.23.140.1
                    /// </summary>
                    public static class CertificatePolicies
                    {
                        public static OID EVGuidelines = new OID("2.23.140.1.1", "ev-guidelines");

                        public static IEnumerable<OID> All => new OID[]
                        {
                            EVGuidelines,
                        };
                    }

                    public static IEnumerable<OID> All => (CertificatePolicies.All);
                }

                public static IEnumerable<OID> All => (CABrowserForum.All);
            }

            public static IEnumerable<OID> All => (DS.All).Concat(Country.All).Concat(InternationalOrganizations.All);
        }

        public static IEnumerable<OID> All => (ISO.All).Concat(JointISOITUT.All);
    }
}
