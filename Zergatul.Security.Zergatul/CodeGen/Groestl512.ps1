function hex($params)
{
    $i = $params[0]
    $digits = $params[1]
    if (-not $digits)
    {
        $digits = 1
    }
    return [System.Convert]::ToString($i, 16).PadLeft($digits, '0')
}

clear

function RBTT($params)
{
    $d = $params[0]
    $a = $params[1]
    $b0 = (hex($params[2], 1))
    $b1 = (hex($params[3], 1))
    $b2 = (hex($params[4], 1))
    $b3 = (hex($params[5], 1))
    $b4 = (hex($params[6], 1))
    $b5 = (hex($params[7], 1))
    $b6 = (hex($params[8], 1))
    $b7 = (hex($params[9], 1))

    Write-Output "ulong t$(hex($d, 1)) ="
    Write-Output "    T0[($a$b0 >> 0x00) & 0xFF] ^ T1[($a$b1 >> 0x08) & 0xFF] ^ T2[($a$b2 >> 0x10) & 0xFF] ^ T3[($a$b3 >> 0x18) & 0xFF] ^"
    Write-Output "    T4[($a$b4 >> 0x20) & 0xFF] ^ T5[($a$b5 >> 0x28) & 0xFF] ^ T6[($a$b6 >> 0x30) & 0xFF] ^ T7[($a$b7 >> 0x38) & 0xFF];"
}

function P
{
    param($a, $r)

    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "$a$(hex($i, 1)) ^= 0x$((hex(($i * 16), 2)).ToUpper()) + $r;"
    }

    RBTT(0x0, $a, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0xB) 
    RBTT(0x1, $a, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC) 
    RBTT(0x2, $a, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0xD) 
    RBTT(0x3, $a, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xE) 
    RBTT(0x4, $a, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xF) 
    RBTT(0x5, $a, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0x0) 
    RBTT(0x6, $a, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0x1) 
    RBTT(0x7, $a, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0x2) 
    RBTT(0x8, $a, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0x3) 
    RBTT(0x9, $a, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x4) 
    RBTT(0xA, $a, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x5) 
    RBTT(0xB, $a, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x6) 
    RBTT(0xC, $a, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x7) 
    RBTT(0xD, $a, 0xD, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x8) 
    RBTT(0xE, $a, 0xE, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x9) 
    RBTT(0xF, $a, 0xF, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0xA)

    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "$a$(hex($i, 1)) = t$(hex($i, 1));"
    }
}

function Q
{
    param($a, $r)

    for ($i = 0; $i -lt 16; $i++)
    {
        $precalc = (hex(((-bnot ($i * 16)) -band 0xFF), 2)).ToUpper()
        # Write-Output "$a$(hex($i, 1)) ^= ($r << 56) ^ ~(0x$((hex(($i * 16), 2)).ToUpper())UL << 56);"
        Write-Output "$a$(hex($i, 1)) ^= ($r << 56) ^ 0x$($precalc)FFFFFFFFFFFFFF;"
    }

    RBTT(0x0, $a, 0x1, 0x3, 0x5, 0xB, 0x0, 0x2, 0x4, 0x6)
    RBTT(0x1, $a, 0x2, 0x4, 0x6, 0xC, 0x1, 0x3, 0x5, 0x7)
    RBTT(0x2, $a, 0x3, 0x5, 0x7, 0xD, 0x2, 0x4, 0x6, 0x8)
    RBTT(0x3, $a, 0x4, 0x6, 0x8, 0xE, 0x3, 0x5, 0x7, 0x9)
    RBTT(0x4, $a, 0x5, 0x7, 0x9, 0xF, 0x4, 0x6, 0x8, 0xA)
    RBTT(0x5, $a, 0x6, 0x8, 0xA, 0x0, 0x5, 0x7, 0x9, 0xB)
    RBTT(0x6, $a, 0x7, 0x9, 0xB, 0x1, 0x6, 0x8, 0xA, 0xC)
    RBTT(0x7, $a, 0x8, 0xA, 0xC, 0x2, 0x7, 0x9, 0xB, 0xD)
    RBTT(0x8, $a, 0x9, 0xB, 0xD, 0x3, 0x8, 0xA, 0xC, 0xE)
    RBTT(0x9, $a, 0xA, 0xC, 0xE, 0x4, 0x9, 0xB, 0xD, 0xF)
    RBTT(0xA, $a, 0xB, 0xD, 0xF, 0x5, 0xA, 0xC, 0xE, 0x0)
    RBTT(0xB, $a, 0xC, 0xE, 0x0, 0x6, 0xB, 0xD, 0xF, 0x1)
    RBTT(0xC, $a, 0xD, 0xF, 0x1, 0x7, 0xC, 0xE, 0x0, 0x2)
    RBTT(0xD, $a, 0xE, 0x0, 0x2, 0x8, 0xD, 0xF, 0x1, 0x3)
    RBTT(0xE, $a, 0xF, 0x1, 0x3, 0x9, 0xE, 0x0, 0x2, 0x4)
    RBTT(0xF, $a, 0x0, 0x2, 0x4, 0xA, 0xF, 0x1, 0x3, 0x5)

    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "$a$(hex($i, 1)) = t$(hex($i, 1));"
    }
}

function ProcessBlock
{
    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "ulong m$(hex($i, 1)) = ToUInt64(buffer, 0x$(hex(($i * 8), 2)), ByteOrder.LittleEndian);"
    }

    Write-Output ""

    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "ulong g$(hex($i, 1)) = m$(hex($i, 1)) ^ s$(hex($i, 1));"
    }

    Write-Output ""
    Write-Output "#region P(g)"
    Write-Output ""

    Write-Output "for (ulong r = 0; r < 14; r++)"
    Write-Output "{"
    P -a 'g' -r 'r'
    Write-Output "}"

    Write-Output ""
    Write-Output "#endregion"

    Write-Output ""
    Write-Output "#region Q(m)"
    Write-Output ""

    Write-Output "for (ulong r = 0; r < 14; r++)"
    Write-Output "{"
    Q -a 'm' -r 'r'
    Write-Output "}"

    Write-Output ""
    Write-Output "#endregion"

    Write-Output ""

    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "s$(hex($i, 1)) ^= g$(hex($i, 1)) ^ m$(hex($i, 1));"
    }

    Write-Output ""
    Write-Output "blocks++;"
}

function LastRound
{
    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "ulong x$(hex($i, 1)) = s$(hex($i, 1));"
    }

    Write-Output ""
    Write-Output "#region P(x)"
    Write-Output ""

    Write-Output "for (ulong r = 0; r < 14; r++)"
    Write-Output "{"
    P -a 'x' -r 'r'
    Write-Output "}"

    Write-Output ""
    Write-Output "#endregion"

    Write-Output ""

    for ($i = 0; $i -lt 16; $i++)
    {
        Write-Output "s$(hex($i, 1)) ^= x$(hex($i, 1));"
    }
}

# ProcessBlock
LastRound